{
  "name": "havenondemand",
  "version": "1.2.2",
  "description": "Official Haven OnDemand Node.js client",
  "main": "index.js",
  "dependencies": {
    "needle": "^0.7.10"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node test.js"
  },
  "author": {
    "name": "Haven OnDemand"
  },
  "contributors": [
    {
      "name": "Tyler Nappy",
      "email": "tyler.nappy@hpe.com"
    },
    {
      "name": "Martin Zerbib"
    }
  ],
  "license": "MIT",
  "readme": "**Note:** formerly known as `iod-node`. For the older version, see the `iod` branch.\n\n# Node JS client library for Haven OnDemand\nOfficial client library to help with calling Haven OnDemand APIs [http://havenondemand.com](http://havenondemand.com).\n\n## What is Haven OnDemand?\nHaven OnDemand is a set of over 60 APIs for handling all sorts of unstructured data. Here are just some of our APIs' capabilities:\n* Speech to text\n* OCR\n* Text extraction\n* Indexing documents\n* Smart search\n* Language identification\n* Concept extraction\n* Sentiment analysis\n* Web crawlers\n* Machine learning\n\nFor a full list of all the APIs and to try them out, check out https://www.havenondemand.com/developer/apis\n\n### Installation\nTo install, run the following command:\n```\nnpm install havenondemand\n```\nIf you want to install the latest module directly from Github, use the following command:\n```\nnpm install git+https://github.com/HP-Haven-OnDemand/havenondemand-node\n```\n\n### Include it\n```js\nvar havenondemand = require('havenondemand')\nvar client = new havenondemand.HODClient(apikey, version, proxy)\n```\nYou can find your API key [here](https://www.haveondemand.com/account/api-keys.html) after signing up.\n\n`version` is an optional parameter (defaults to `'v1'`) and can be either `'v1'` or `'v2'`.\n\n`proxy` is an optional parameter. Please set this if you're behind a firewall. Here is an example of iniating the client if you're using a proxy:\n```js\nvar havenondemand = require('havenondemand')\nvar client = new havenondemand.HODClient('123456-asdf', 'v1', 'http://user:pass@proxy.server.com:3128')\n```\n### Callbacks\n\n```js\nvar callback = function(err,resp,body){\n  console.log(body)\n}\n```\n\nWe can define our callbacks as functions and pass them as arguments\n\n```js\nvar data = {'text' : 'I like cats'}\nclient.post('analyzesentiment', callback, data)\n```\nOr, we can use the .on('data') hook to do the same thing.\n\n```js\nclient.post('analyzesentiment',data).on('data',callback)\n```\n\nThe order of the arguments after the API name doesn't matter when passed, so all of these are the equivalent.\n\n```js\n//1\nclient.post('analyzesentiment', data, callback)\n//2\nclient.post(data, 'analyzesentiment', callback)\n//3\nclient.post(data, callback, 'analyzesentiment')\n```\n\n### GET request\nAPIs can also be accessed via a GET request.\n```js\nclient.get('analyzesentiment', {'text': 'I love dogs'}, function(err, resp, body) {\n  if (!err) {\n    console.log(resp.body)\n  }\n})\n```\n\n### Async calls\n\nWhile node will mostly deals with processes asynchronously, Haven OnDemand offers server side asynchronous call methods which should be used with large files and slow queries. Pass a boolean for the async parameter. The API response will return back a job ID which is used to check the status or result of your API request.\n```js\nvar jobID\nclient.post('analyzesentiment', data, true, function(err, resp, body) {\n  jobID = resp.body.jobID\n  console.log(jobID)\n})\n```\n**(Recommended method)** To check the status of your API call, use the following code with the jobID from obtained from the async call above. This will tell you if it's still processing or if it's complete, and if so, it will return the result.\n```js\nclient.getJobStatus(jobID, function(err, resp, body) {\n  console.log(resp.body)\n})\n```\nOr, to check the result of your API call, use the following code with the jobID obtained from the async call. *Note: This method may timeout if your async API call is still processing.*\n```js\nclient.getJobResult(jobID, function(err, resp, body) {\n  console.log(resp.body)\n})\n```\n\n### Posting files\n\nFile posting is handled using the \"file\" parameter name which is used for all current file postings in Haven OnDemand\n\n```js\nvar data = {'file' : 'test.txt'}\nclient.post('analyzesentiment', data, function(err, resp, body) {\n  console.log(resp.body)\n})\n```\n\n### Batch jobs\n\nHaven OnDemand allows you to batch multiple API jobs in a single request using the Job API, for example, to analyze a batch of web pages, documents or social media messages where you need to analyze each text individually but want to be more efficient with your code, or where you want to execute multiple API calls on a single web page, document, or text. **Note: files are currently not supported in this wrapper for batch jobs.**\n\n```js\nvar jobID\nvar data = [\n  { \"name\": \"analyzesentiment\",\n     \"version\": \"v1\",\n     \"params\": {\n        'text': 'I love dogs'\n      }\n   },\n   { \"name\": \"extractconcepts\",\n      \"version\": \"v1\",\n      \"params\": {\n         \"url\": \"http://en.wikipedia.org/wiki/United_Kingdom\"\n       }\n    }\n ]\nclient.batchJob(data, function(err, resp, body) {\n  jobID = resp.body.jobID\n  console.log(jobID)\n})\n\n//\n// check result of async request with Status API after some time\n//\n\nclient.getJobStatus(jobID, function(err, resp, body) {\n  console.log(resp.body)\n})\n```\n\n\n## Contributing\nWe encourage you to contribute to this repo! Please send pull requests with modified and updated code.\n\n1. Fork it ( https://github.com/HPE-Haven-OnDemand/havenondemand-node/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n",
  "readmeFilename": "README.md",
  "_id": "havenondemand@1.2.2",
  "dist": {
    "shasum": "d1441103e57d27025411ce724c0d6f6de91e220f"
  },
  "_from": "havenondemand@^1.2.0",
  "_resolved": "https://registry.npmjs.org/havenondemand/-/havenondemand-1.2.2.tgz"
}
